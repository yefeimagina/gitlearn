labelLine = list(show = showLabel)), emphasis = list(label = list(show = !showLabel),
labelLine = list(show = !showLabel))), data = datList))
opt$size = size
chart = htmlwidgets::createWidget("echarts", opt, width = size[1],
height = size[2], package = "recharts")
chart
ePie()
ePie
ePie(x)
ePie(x,type="rose")
type
type = "rose"
opt$series = list(list(name = paste(type, "chart"), type = "pie",
radius = c(20, 110), center = c("50%", 200), roseType = ifelse(type ==
"rose", roseType, ""), itemStyle = list(normal = list(label = list(show = showLabel),
labelLine = list(show = showLabel)), emphasis = list(label = list(show = !showLabel),
labelLine = list(show = !showLabel))), data = datList))
opt$size = size
chart = htmlwidgets::createWidget("echarts", opt, width = size[1],
height = size[2], package = "recharts")
chart
opt$series = list(list(name = paste(type, "chart"), type = "pie",
radius = c(20, 110), center = c("50%", 200), roseType = ifelse(type ==
"rose", roseType, "ring"), itemStyle = list(normal = list(label = list(show = showLabel),
labelLine = list(show = showLabel)), emphasis = list(label = list(show = !showLabel),
labelLine = list(show = !showLabel))), data = datList))
opt$size = size
chart = htmlwidgets::createWidget("echarts", opt, width = size[1],
height = size[2], package = "recharts")
chart
type="pie"
opt$series = list(list(name = paste(type, "chart"), type = "pie",
radius = c(20, 110), center = c("50%", 200), roseType = ifelse(type ==
"rose", roseType, "ring"), itemStyle = list(normal = list(label = list(show = showLabel),
labelLine = list(show = showLabel)), emphasis = list(label = list(show = !showLabel),
labelLine = list(show = !showLabel))), data = datList))
opt$size = size
chart = htmlwidgets::createWidget("echarts", opt, width = size[1],
height = size[2], package = "recharts")
chart
opt$series = list(list(name = paste(type, "chart"), type = "pie",
radius = c(20, 110), center = c("50%", 200), roseType = ifelse(type ==
"rose", roseType, ""), itemStyle = list(normal = list(label = list(show = showLabel),
labelLine = list(show = showLabel)), emphasis = list(label = list(show = !showLabel),
labelLine = list(show = !showLabel))), data = datList))
opt$size = size
chart = htmlwidgets::createWidget("echarts", opt, width = size[1],
height = size[2], package = "recharts")
chart
type
type = "rose"
opt$series = list(list(name = paste(type, "chart"), type = "pie",
radius = c(20, 110), center = c("50%", 200), roseType = ifelse(type ==
"rose", roseType, ""), itemStyle = list(normal = list(label = list(show = showLabel),
labelLine = list(show = showLabel)), emphasis = list(label = list(show = !showLabel),
labelLine = list(show = !showLabel))), data = datList))
opt$size = size
chart = htmlwidgets::createWidget("echarts", opt, width = size[1],
height = size[2], package = "recharts")
chart
felse(type ==
"rose", roseType, "")
ifelse(type ==
"rose", roseType, "")
type
type = "pie"
ifelse(type ==
"rose", roseType, "")
roseType
type
ifelse(type ==
"rose", roseType, "ring")
opt$series = list(list(name = paste(type, "chart"), type = "pie",
radius = c(20, 110), center = c("50%", 200), roseType = ifelse(type ==
"rose", roseType, "ring"), itemStyle = list(normal = list(label = list(show = showLabel),
labelLine = list(show = showLabel)), emphasis = list(label = list(show = !showLabel),
labelLine = list(show = !showLabel))), data = datList))
opt$size = size
chart = htmlwidgets::createWidget("echarts", opt, width = size[1],
height = size[2], package = "recharts")
chart
type
ifelse(type ==
"rose", roseType, "ring")
opt$series = list(list(name = paste(type, "chart"), type = "pie",
radius = c(20, 110), center = c("50%", 200), roseType = ifelse(type ==
"rose", roseType, "ring"), itemStyle = list(normal = list(label = list(show = showLabel),
labelLine = list(show = showLabel)), emphasis = list(label = list(show = !showLabel),
labelLine = list(show = !showLabel))), data = datList))
opt$size = size
chart = htmlwidgets::createWidget("echarts", opt, width = size[1],
height = size[2], package = "recharts")
chart
type
type = "rose"
opt$series = list(list(name = paste(type, "chart"), type = "pie",
radius = c(20, 110), center = c("50%", 200), roseType = ifelse(type ==
"rose", roseType, "ring"), itemStyle = list(normal = list(label = list(show = showLabel),
labelLine = list(show = showLabel)), emphasis = list(label = list(show = !showLabel),
labelLine = list(show = !showLabel))), data = datList))
opt$size = size
chart = htmlwidgets::createWidget("echarts", opt, width = size[1],
height = size[2], package = "recharts")
chart
opt
type
type = "pie"
opt$series = list(list(name = paste(type, "chart"), type = "pie",
radius = c(20, 110), center = c("50%", 200), roseType = ifelse(type ==
"rose", roseType, "ring"), itemStyle = list(normal = list(label = list(show = showLabel),
labelLine = list(show = showLabel)), emphasis = list(label = list(show = !showLabel),
labelLine = list(show = !showLabel))), data = datList))
opt$size = size
opt
type = "ring"
opt$series = list(list(name = paste(type, "chart"), type = "pie",
radius = c(20, 110), center = c("50%", 200), roseType = ifelse(type ==
"rose", roseType, "ring"), itemStyle = list(normal = list(label = list(show = showLabel),
labelLine = list(show = showLabel)), emphasis = list(label = list(show = !showLabel),
labelLine = list(show = !showLabel))), data = datList))
opt$size = size
chart = htmlwidgets::createWidget("echarts", opt, width = size[1],
height = size[2], package = "recharts")
chart
opt
type = "rose"
type <- match.arg(type)
ePie(x)
ePie(x,roseType = "rose")
ePie(x,roseType = "area")
ePie(x,roseType = "radias")
ePie(x,roseType = "radias",type="rose")
ePie(x,roseType = "area",type="rose")
ePie(x,roseType = "radias",type="rose")
ePie(x,roseType = "area",type="rose")
ePie(x,roseType = "radias",type="rose")
library(recharts)
x = runif(6)
names(x) = LETTERS[1:6]
ePie(x,type="ring")
x = runif(6)
names(x) = LETTERS[1:6]
ePie(x,type="rose")
ePie
?htmlwidgets::createWidget
getwd()
library(devtools)
library(devtools)
devtools::install_github("yefeimagina/recharts@dev")
library(recharts)
?ePie
ePie
install.packages("raster")
library(raster)
?crop
r <- raster(nrow=45, ncol=90)
r[] <- 1:ncell(r)
e <- extent(-160, 10, 30, 60)
rc <- crop(r, e)
r
rc2 <- crop(r, extent(r, 5, 10, 7, 15)
)
m = merge(r1, r2, filename='test.grd', overwrite=TRUE)
r <- raster()
r
plot(r)
r[] <- 1:ncell(r)
r
ncell(r)
ra <- aggregate(r, 10)
ra
r1 <- crop(r, extent(-180,0,0,30))
r2 <- crop(r, extent(-10,180,-20,10))
m <- merge(r1, r2, filename='test.grd', overwrite=TRUE)
plot(m)
library(ePie)
library(recharts)
library(ReporteRs)
setwd("E:/10")
rm(list =ls())
datainfo = read.csv("com2017.csv",stringsAsFactors = F)
map  = read.csv("mapdata.csv",stringsAsFactors = F)
info = read.csv("competemodel.csv",stringsAsFactors = F)
i = 1
or = filter(datainfo,modelIdx ==  t1[i])
temdata = datainfo %>% na.omit()
temdata$ps = 1/(abs(log(temdata$meanprice/or$meanprice,10))+1)
#make similarity of price
segnum =filter(temdata,Segment == or$Segment)$amo %>% sum()
temdata$segper = 0
temdata$segper[temdata$Segment == or$Segment] = temdata$amo[temdata$Segment == or$Segment]/segnum
#make market share
temdata$segs = 0
for(j in 1:nrow(temdata))
{
if(temdata[j,]$Segment == or$Segment)
{
temdata$segs = 1/(abs(log(temdata$segper/(or$amo/segnum),10))+1)
}
}
#make similarity of marker share
temdata$y = 0
ids = filter(xx,ModelIdx == t1[i])$competeIdx
temdata$y[temdata$modelIdx %in% ids] = 1
#make y
contains = filter(datainfo,modelIdx %in% ids)$Subsegment
dataex = filter(temdata, (Subsegment %in% contains)|(y==1))
library(dplyr)
datainfo = read.csv("com2017.csv",stringsAsFactors = F)
map  = read.csv("mapdata.csv",stringsAsFactors = F)
info = read.csv("competemodel.csv",stringsAsFactors = F)
i = 1
or = filter(datainfo,modelIdx ==  t1[i])
temdata = datainfo %>% na.omit()
temdata$ps = 1/(abs(log(temdata$meanprice/or$meanprice,10))+1)
#make similarity of price
segnum =filter(temdata,Segment == or$Segment)$amo %>% sum()
temdata$segper = 0
temdata$segper[temdata$Segment == or$Segment] = temdata$amo[temdata$Segment == or$Segment]/segnum
#make market share
temdata$segs = 0
for(j in 1:nrow(temdata))
{
if(temdata[j,]$Segment == or$Segment)
{
temdata$segs = 1/(abs(log(temdata$segper/(or$amo/segnum),10))+1)
}
}
#make similarity of marker share
temdata$y = 0
ids = filter(xx,ModelIdx == t1[i])$competeIdx
temdata$y[temdata$modelIdx %in% ids] = 1
#make y
contains = filter(datainfo,modelIdx %in% ids)$Subsegment
dataex = filter(temdata, (Subsegment %in% contains)|(y==1))
View(temdata)
View(temdata)
View(info)
View(info)
x0 = filter(info,addnum == 0)
x1 = filter(info,addnum == 1)[c(T,T,T,T,F),]
View(x1)
View(x1)
x2 = filter(info,addnum == 2)[c(T,T,T,F,F),]
x3 = filter(info,addnum == 3)[c(T,T,F,F,F),]
x3 = filter(info,addnum == 3)[c(T,T,F,F,F),]
xx = rbind(x0,x1,x2,x3,x4)
x4 = filter(info,addnum == 4)[c(T,T,T,T,F),]
xx = rbind(x0,x1,x2,x3,x4)
View(xx)
View(xx)
ti = xx$ModelIdx[!duplicated(xx$ModelIdx)]
ti
library(dplyr)
datainfo = read.csv("com2017.csv",stringsAsFactors = F)
map  = read.csv("mapdata.csv",stringsAsFactors = F)
info = read.csv("competemodel.csv",stringsAsFactors = F)
x0 = filter(info,addnum == 0)
x1 = filter(info,addnum == 1)[c(T,T,T,T,F),]
x2 = filter(info,addnum == 2)[c(T,T,T,F,F),]
x3 = filter(info,addnum == 3)[c(T,T,F,F,F),]
x4 = filter(info,addnum == 4)[c(T,T,T,T,F),]
xx = rbind(x0,x1,x2,x3,x4)
t1 = xx$ModelIdx[!duplicated(xx$ModelIdx)]
i = 1
or = filter(datainfo,modelIdx ==  t1[i])
temdata = datainfo %>% na.omit()
temdata$ps = 1/(abs(log(temdata$meanprice/or$meanprice,10))+1)
#make similarity of price
segnum =filter(temdata,Segment == or$Segment)$amo %>% sum()
temdata$segper = 0
temdata$segper[temdata$Segment == or$Segment] = temdata$amo[temdata$Segment == or$Segment]/segnum
#make market share
temdata$segs = 0
for(j in 1:nrow(temdata))
{
if(temdata[j,]$Segment == or$Segment)
{
temdata$segs = 1/(abs(log(temdata$segper/(or$amo/segnum),10))+1)
}
}
#make similarity of marker share
temdata$y = 0
ids = filter(xx,ModelIdx == t1[i])$competeIdx
temdata$y[temdata$modelIdx %in% ids] = 1
#make y
contains = filter(datainfo,modelIdx %in% ids)$Subsegment
dataex = filter(temdata, (Subsegment %in% contains)|(y==1))
View(dataex)
View(dataex)
mp = or$highprice
lp = or$lowprice
,p
mp
lp
(1-sigma)*lp
sigma = 0.5
(1-sigma)*lp
(1+sigma)*mp
dataex1 = filter(dataex,highprice > !((1+sigma)*mp | lowprice <(1-sigma)*lp))
View(dataex1)
View(dataex1)
dataex1 = filter(dataex,lowprice > !((1+sigma)*mp | highprice <(1-sigma)*lp))
dataex1 = filter(dataex,!(lowprice > (1+sigma)*mp | highprice <(1-sigma)*lp))
View(dataex1)
View(dataex1)
sigma = -0.1
#scale parameter
dataex1 = filter(dataex,!(lowprice > (1+sigma)*mp | highprice <(1-sigma)*lp))
sigma = -0.3
#scale parameter
dataex1 = filter(dataex,!(lowprice > (1+sigma)*mp | highprice <(1-sigma)*lp))
library(dplyr)
datainfo = read.csv("com2017.csv",stringsAsFactors = F)
map  = read.csv("mapdata.csv",stringsAsFactors = F)
info = read.csv("competemodel.csv",stringsAsFactors = F)
x0 = filter(info,addnum == 0)
x1 = filter(info,addnum == 1)[c(T,T,T,T,F),]
x2 = filter(info,addnum == 2)[c(T,T,T,F,F),]
x3 = filter(info,addnum == 3)[c(T,T,F,F,F),]
x4 = filter(info,addnum == 4)[c(T,T,T,T,F),]
xx = rbind(x0,x1,x2,x3,x4)
t1 = xx$ModelIdx[!duplicated(xx$ModelIdx)]
i = 1
or = filter(datainfo,modelIdx ==  t1[i])
temdata = datainfo %>% na.omit()
temdata$ps = 1/(abs(log(temdata$meanprice/or$meanprice,10))+1)
#make similarity of price
segnum =filter(temdata,Segment == or$Segment)$amo %>% sum()
temdata$segper = 0
temdata$segper[temdata$Segment == or$Segment] = temdata$amo[temdata$Segment == or$Segment]/segnum
#make market share
temdata$segs = 0
for(j in 1:nrow(temdata))
{
if(temdata[j,]$Segment == or$Segment)
{
temdata$segs = 1/(abs(log(temdata$segper/(or$amo/segnum),10))+1)
}
}
#make similarity of marker share
temdata$y = 0
ids = filter(xx,ModelIdx == t1[i])$competeIdx
temdata$y[temdata$modelIdx %in% ids] = 1
#make y
contains = filter(datainfo,modelIdx %in% ids)$Subsegment
dataex = filter(temdata, (Subsegment %in% contains)|(y==1))
#first choose
mp = or$highprice
lp = or$lowprice
sigma = -0.3
#scale parameter
dataex = filter(dataex,!(lowprice > (1+sigma)*mp | highprice <(1-sigma)*lp))
#secondchoose
library(dplyr)
datainfo = read.csv("com2017.csv",stringsAsFactors = F)
map  = read.csv("mapdata.csv",stringsAsFactors = F)
info = read.csv("competemodel.csv",stringsAsFactors = F)
x0 = filter(info,addnum == 0)
x1 = filter(info,addnum == 1)[c(T,T,T,T,F),]
x2 = filter(info,addnum == 2)[c(T,T,T,F,F),]
x3 = filter(info,addnum == 3)[c(T,T,F,F,F),]
x4 = filter(info,addnum == 4)[c(T,T,T,T,F),]
xx = rbind(x0,x1,x2,x3,x4)
t1 = xx$ModelIdx[!duplicated(xx$ModelIdx)]
for(i in 1:length(t1)
{
or = filter(datainfo,modelIdx ==  t1[i])
temdata = datainfo %>% na.omit()
temdata$ps = 1/(abs(log(temdata$meanprice/or$meanprice,10))+1)
#make similarity of price
segnum =filter(temdata,Segment == or$Segment)$amo %>% sum()
temdata$segper = 0
temdata$segper[temdata$Segment == or$Segment] = temdata$amo[temdata$Segment == or$Segment]/segnum
#make market share
temdata$segs = 0
for(j in 1:nrow(temdata))
{
if(temdata[j,]$Segment == or$Segment)
{
temdata$segs = 1/(abs(log(temdata$segper/(or$amo/segnum),10))+1)
}
}
#make similarity of marker share
temdata$y = 0
ids = filter(xx,ModelIdx == t1[i])$competeIdx
temdata$y[temdata$modelIdx %in% ids] = 1
#make y
contains = filter(datainfo,modelIdx %in% ids)$Subsegment
dataex = filter(temdata, (Subsegment %in% contains)|(y==1))
#first choose
mp = or$highprice
lp = or$lowprice
sigma = -0.3
#scale parameter
dataex = filter(dataex,!(lowprice > (1+sigma)*mp | highprice <(1-sigma)*lp))
#secondchoose
if(i == 1){
finadata = dataex
}else{
finadata = rbind(finadata,dataex)
}
}
1:length(t1)
library(dplyr)
datainfo = read.csv("com2017.csv",stringsAsFactors = F)
map  = read.csv("mapdata.csv",stringsAsFactors = F)
info = read.csv("competemodel.csv",stringsAsFactors = F)
x0 = filter(info,addnum == 0)
x1 = filter(info,addnum == 1)[c(T,T,T,T,F),]
x2 = filter(info,addnum == 2)[c(T,T,T,F,F),]
x3 = filter(info,addnum == 3)[c(T,T,F,F,F),]
x4 = filter(info,addnum == 4)[c(T,T,T,T,F),]
xx = rbind(x0,x1,x2,x3,x4)
t1 = xx$ModelIdx[!duplicated(xx$ModelIdx)]
for(i in 1:length(t1))
{
or = filter(datainfo,modelIdx ==  t1[i])
temdata = datainfo %>% na.omit()
temdata$ps = 1/(abs(log(temdata$meanprice/or$meanprice,10))+1)
#make similarity of price
segnum =filter(temdata,Segment == or$Segment)$amo %>% sum()
temdata$segper = 0
temdata$segper[temdata$Segment == or$Segment] = temdata$amo[temdata$Segment == or$Segment]/segnum
#make market share
temdata$segs = 0
for(j in 1:nrow(temdata))
{
if(temdata[j,]$Segment == or$Segment)
{
temdata$segs = 1/(abs(log(temdata$segper/(or$amo/segnum),10))+1)
}
}
#make similarity of marker share
temdata$y = 0
ids = filter(xx,ModelIdx == t1[i])$competeIdx
temdata$y[temdata$modelIdx %in% ids] = 1
#make y
contains = filter(datainfo,modelIdx %in% ids)$Subsegment
dataex = filter(temdata, (Subsegment %in% contains)|(y==1))
#first choose
mp = or$highprice
lp = or$lowprice
sigma = -0.3
#scale parameter
dataex = filter(dataex,!(lowprice > (1+sigma)*mp | highprice <(1-sigma)*lp))
#secondchoose
if(i == 1){
finadata = dataex
}else{
finadata = rbind(finadata,dataex)
}
}
library(dplyr)
datainfo = read.csv("com2017.csv",stringsAsFactors = F)
map  = read.csv("mapdata.csv",stringsAsFactors = F)
info = read.csv("competemodel.csv",stringsAsFactors = F)
x0 = filter(info,addnum == 0)
x1 = filter(info,addnum == 1)[c(T,T,T,T,F),]
x2 = filter(info,addnum == 2)[c(T,T,T,F,F),]
x3 = filter(info,addnum == 3)[c(T,T,F,F,F),]
x4 = filter(info,addnum == 4)[c(T,T,T,T,F),]
xx = rbind(x0,x1,x2,x3,x4)
t1 = xx$ModelIdx[!duplicated(xx$ModelIdx)]
for(i in 1:length(t1))
{
or = filter(datainfo,modelIdx ==  t1[i])
temdata = datainfo %>% na.omit()
temdata$ps = 1/(abs(log(temdata$meanprice/or$meanprice,10))+1)
#make similarity of price
segnum =filter(temdata,Segment == or$Segment)$amo %>% sum()
temdata$segper = 0
temdata$segper[temdata$Segment == or$Segment] = temdata$amo[temdata$Segment == or$Segment]/segnum
#make market share
temdata$segs = 0
for(j in 1:nrow(temdata))
{
if(temdata[j,]$Segment == or$Segment)
{
temdata$segs = 1/(abs(log(temdata$segper/(or$amo/segnum),10))+1)
}
}
#make similarity of marker share
temdata$y = 0
ids = filter(xx,ModelIdx == t1[i])$competeIdx
temdata$y[temdata$modelIdx %in% ids] = 1
#make y
contains = filter(datainfo,modelIdx %in% ids)$Subsegment
dataex = filter(temdata, (Subsegment %in% contains)|(y==1))
#first choose
mp = or$highprice
lp = or$lowprice
sigma = -0.3
#scale parameter
dataex = filter(dataex,!(lowprice > (1+sigma)*mp | highprice <(1-sigma)*lp))
#secondchoose
if(i == 1){
finadata = dataex
}else{
finadata = rbind(finadata,dataex)
}
print(i)
}
View(finadata)
View(finadata)
nrow(filter(finadata,y == 1))
library("ReportRs")
library("ReporteRs")
mydoc = pptx()
?pptx()
doc = pptx( title = "title" )
doc = pptx("1.pptx")
